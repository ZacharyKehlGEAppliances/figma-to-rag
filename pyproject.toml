[tool.poetry]
name = "figma-to-rag"
version = "0.1.0"
description = "Convert Figma components to RAG-optimized format"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "figma_to_rag"}]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.31.0"
pydantic = "^2.5.0"
rich = "^13.7.0"
typer = "^0.13.0"
python-dotenv = "^1.0.0"
tenacity = "^8.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.10.0"
isort = "^5.12.0"
mypy = "^1.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
pre-commit = "^3.5.0"
responses = "^0.23.0"
types-requests = "^2.31.0"
ruff = "^0.1.6"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
figma-to-rag = "figma_to_rag.cli:app"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    --strict-markers
    --strict-config
    --cov=figma_to_rag
    --cov-report=term-missing
    --cov-report=xml
    --cov-report=html
"""

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.ruff]
select = [
    "E",
    "W",
    "F",
    "I",
    "C",
    "B",
]
ignore = [
    "E501",
]
target-version = "py39"
line-length = 88

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
branch = true
source = ["figma_to_rag"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]